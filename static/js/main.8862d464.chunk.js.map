{"version":3,"sources":["Share.tsx","utils/index.ts","Planner.tsx","Picker.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Share","props","_useState","useState","_useState2","Object","slicedToArray","friendName","setFriendName","_useState3","_useState4","friendCode","setFriendCode","react_default","a","createElement","className","placeholder","value","onChange","e","currentTarget","disabled","onClick","addUser","getSets","_ref","asyncToGenerator","regenerator_default","mark","_callee","response","data","sets","wrap","_context","prev","next","fetch","sent","json","abrupt","stop","apply","this","arguments","decodeShare","compressed","choices","decompress","split","filter","x","name","ids","slice","map","parseInt","formatDate","date","format","Planner","friendsAndSets","values","R","setIds","friend","id","flat","friendsAndSetsBySetId","toString","friendsBySetId","fas","allSets","friends","objectSpread","find","setsByTime","startTime","valueOf","setsByDay","_ref2","zero","Date","addDays","differenceInDays","esm","defaultIndex","forceRenderTabPanel","keys","day","key","concat","set","i","title","setNumber","totalSetCount","endTime","stage","join","Picker","react","dist_default","assign","open","keepOpen","multiple","includeFilter","App","isLoading","setLoading","myName","setMyName","_useState5","_useState6","mySelection","setMySelection","_useState7","_useState8","setAllSets","_useState9","_useState10","artistOptions","setArtistOptions","_useState11","_useState12","friendArtists","setFriendArtists","useEffect","artists","s","me","URLSearchParams","window","location","search","get","defineProperty","artist","encoded","toConsumableArray","joined","console","log","length","compress","encodeShare","params","history","pushState","chosenSets","chosenArtists","type","Share_Share","code","Picker_Picker","options","selection","Planner_Planner","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8862d464.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\ninterface Props {\r\n  addUser: (name: string, code: string) => void;\r\n}\r\n\r\nexport const Share = (props: Props) => {\r\n  const [friendName, setFriendName] = useState<string>();\r\n  const [friendCode, setFriendCode] = useState<string>();\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"field field-add-friend\">\r\n        <label>Add a friend</label>\r\n        <div className=\"field-add-friend__inputs\">\r\n          <input\r\n            placeholder=\"Name\"\r\n            value={friendName}\r\n            onChange={e => setFriendName(e.currentTarget.value)}\r\n          />\r\n          <input\r\n            placeholder=\"Code\"\r\n            value={friendCode}\r\n            onChange={e => setFriendCode(e.currentTarget.value)}\r\n          />\r\n        </div>\r\n        \r\n        <button\r\n          disabled={!friendName || !friendCode}\r\n          onClick={() => props.addUser(friendName!, friendCode!)}\r\n        >\r\n          Add\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","\r\nimport { ISet } from \"../../data/scraper\";\r\nimport { decompressFromEncodedURIComponent as decompress, compressToEncodedURIComponent as compress } from \"lz-string\";\r\n\r\n/**\r\n * Load sets from sets.json\r\n */\r\nexport const getSets = async (): Promise<ISet[]> => {\r\n  const response = await fetch(\"/sets.json\");\r\n  const data = await response.json();\r\n  const sets = data.sets as ISet[];\r\n  return sets;\r\n}\r\n\r\nexport const decodeShare = (compressed: string): { name: string, ids: number[] } => {\r\n  const choices = (decompress(compressed) || \"\").split(\";\").filter(x => !!x);\r\n  const name = choices[0];\r\n  const ids = choices.slice(1).map(x => parseInt(x));\r\n\r\n  return { name, ids };\r\n}\r\n\r\nexport const encodeShare = (name: string, ids: number[]): string => {\r\n  const data = [name, ...ids];\r\n  const joined = data.join(\";\");\r\n  console.log(joined);\r\n\r\n  const value = data.length ? compress(joined) : \"\";\r\n  return value;\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Tabs, TabList, Tab, TabPanel } from \"react-tabs\";\r\nimport * as R from \"ramda\";\r\nimport { format, differenceInDays, addDays } from \"date-fns\";\r\nimport { ISet } from \"../data/scraper\";\r\n\r\ninterface OwnProps {\r\n  sets: ISet[];\r\n  choices: Record<string, number[]>;\r\n}\r\n\r\ninterface ISetInfo extends ISet {\r\n  setNumber: number;\r\n  totalSetCount: number;\r\n  friends: string[];\r\n}\r\n\r\nconst formatDate = (date: Date | null): string => date ? format(date, \"ddd HH:mm\") : \"TBA\";\r\n\r\nexport const Planner = ({ choices, sets }: OwnProps) => {\r\n\r\n  const friendsAndSets = Object.values(R.mapObjIndexed((setIds, friend) => setIds.map(id => ({ id, friend })), choices)).flat();\r\n  const friendsAndSetsBySetId = R.groupBy(x => x.id.toString(), friendsAndSets);\r\n  const friendsBySetId = R.mapObjIndexed(fas => fas.map(x => x.friend), friendsAndSetsBySetId);\r\n  const allSets = R.mapObjIndexed((friends, id) => ({ ...sets.find(x => x.id == parseInt(id)), friends }), friendsBySetId)\r\n\r\n  const setsByTime = R.sortBy(x => x.startTime ? x.startTime.valueOf() : -1, R.values(allSets).flat());\r\n  const setsByDay = R.groupBy(({ startTime }) => {\r\n    // Number of full days between day 0 (Weds 26th @ 5am)\r\n    const zero = new Date(2019, 5, 26, 5, 0);\r\n    return (startTime\r\n      ? format(addDays(zero, differenceInDays(startTime, zero)), \"ddd\")\r\n      : \"TBA\");\r\n  }, setsByTime)\r\n\r\n  return (\r\n    <Tabs defaultIndex={0} forceRenderTabPanel>\r\n      <TabList>\r\n        {Object.keys(setsByDay).map(day => <Tab key={`tab-${day}`}>{day}</Tab>)}\r\n      </TabList>\r\n\r\n      {Object.keys(setsByDay).map(day => {\r\n        const sets = setsByDay[day];\r\n        return (\r\n          <TabPanel key={`sets-${day}`}>\r\n            {sets.map((set, i) => (\r\n              <div key={i}>\r\n                <h3>{set.title} ({set.setNumber}/{set.totalSetCount})</h3>\r\n                <p>{formatDate(set.startTime)} - {formatDate(set.endTime)}</p>\r\n                <p>{set.stage}</p>\r\n                <p>{set.friends.join(\", \")}</p>\r\n              </div>\r\n            ))}\r\n          </TabPanel>\r\n        );\r\n      })}\r\n    </Tabs>\r\n  )\r\n}","import * as React from \"react\";\r\nimport Picky, { PickyValue } from \"react-picky\";\r\n\r\ninterface OwnProps {\r\n  options: string[];\r\n  value: string[];\r\n  onChange: (x: PickyValue) => void;\r\n}\r\n\r\nexport const Picker = (props: OwnProps) => {\r\n  return (\r\n    <div>\r\n      <Picky\r\n        open\r\n        keepOpen\r\n        multiple\r\n        includeFilter\r\n        {...props}\r\n      />\r\n    </div>\r\n  )\r\n}","import React, { useState, useEffect } from 'react';\r\nimport * as R from \"ramda\";\r\nimport { Share } from './Share';\r\nimport { ISet } from '../data/scraper';\r\nimport { getSets, decodeShare, encodeShare } from './utils';\r\nimport { Planner } from './Planner';\r\n\r\nimport './App.scss';\r\nimport \"react-calendar-timeline/lib/Timeline.css\";\r\nimport \"react-picky/dist/picky.css\";\r\nimport { Picker } from './Picker';\r\n\r\nconst App: React.FC = () => {\r\n  const [isLoading, setLoading] = useState<boolean>(false);\r\n  const [myName, setMyName] = useState<string>(\"me\");\r\n  const [mySelection, setMySelection] = useState<string[]>([]);\r\n  const [allSets, setAllSets] = useState<ISet[]>([]);\r\n  const [artistOptions, setArtistOptions] = useState<string[]>([]);\r\n  const [friendArtists, setFriendArtists] = useState<Record<string, number[]>>({});\r\n\r\n  // Load set data\r\n  useEffect(() => {\r\n    setLoading(true);\r\n\r\n    (async () => {\r\n      const sets = await getSets();\r\n\r\n      const artists = R.sortBy(x => x, R.uniq(sets.map(s => s.title)));\r\n\r\n      setAllSets(sets);\r\n      setArtistOptions(artists);\r\n      setLoading(false);\r\n    })();\r\n  }, []);\r\n\r\n  // Initialise selection from query string\r\n  useEffect(() => {\r\n    const me = decodeShare(new URLSearchParams(window.location.search).get(\"a\") || \"\");\r\n    setFriendArtists({ ...friendArtists, [me.name]: me.ids });\r\n  }, []);\r\n  \r\n  // Update qs when name or sets change\r\n  useEffect(() => {\r\n    const choices = mySelection.filter(x => !!x);\r\n    const sets = R.innerJoin((set, artist) => set.title == artist, Object.values(allSets).flat(), choices);\r\n    const setIds = sets.map(x => x.id);\r\n\r\n    const encoded = encodeShare(myName, setIds);\r\n\r\n    const params = new URLSearchParams(window.location.search);\r\n    params.set(\"a\", encoded);\r\n    window.history.pushState(\"\", \"\", \"?\" + params.toString());\r\n\r\n    setFriendArtists({ ...friendArtists, me: setIds });\r\n  }, [mySelection, myName]);\r\n\r\n  const chosenSets = R.innerJoin((set, id) => set.id == id, Object.values(allSets).flat(), friendArtists.me || []);\r\n  const chosenArtists = R.uniq(chosenSets.map(x => x.title));\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      {isLoading && \"Loading...\"}\r\n\r\n      <input type=\"text\" value={myName} onChange={e => setMyName(e.currentTarget.value)} />\r\n\r\n      <Share addUser={(code) => {\r\n        const choices = decodeShare(code);\r\n        setFriendArtists({ ...friendArtists, [choices.name]: choices.ids });\r\n      }} />\r\n\r\n      <div className=\"columns\">\r\n        <div className=\"column is-half-tablet is-full-mobile\">\r\n          <Picker\r\n            options={artistOptions}\r\n            value={chosenArtists || []}\r\n            onChange={selection => setMySelection(selection as string[])}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"column is-half-tablet is-full-mobile\">\r\n          <Planner sets={allSets} choices={friendArtists} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}